{"version":3,"sources":["components/nav/navbars.js","components/card/card.js","components/card_holder/index.js","components/container/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","id","this","props","topScore","score","React","Component","Card","_this","onClick","click","src","img","alt","holder","children","container","App","sort","array","lotr","i","length","j","Math","floor","random","_ref","state","list","clicked","newScore","filter","newArray","undefined","newClicked","push","setState","_this2","components_container","navbars","card_holder","map","element","card_card","key","image","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6wEAwBeA,0LAbC,OAEQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACNH,EAAAC,EAAAC,cAAA,MAAIE,GAAG,YAAP,eAA+BC,KAAKC,MAAMC,UAC1CP,EAAAC,EAAAC,cAAA,MAAIE,GAAG,SAAP,WAAwBC,KAAKC,MAAME,eAZ/CC,IAAMC,YCiBZC,0LAfH,IAAAC,EAAAP,KAEJ,OACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYU,QAAS,kBAAKD,EAAKN,MAAMQ,MAAMF,EAAKN,MAAMF,MACjEJ,EAAAC,EAAAC,cAAA,OAAKa,IAAKV,KAAKC,MAAMU,IAAKC,IAAI,MAAMd,UAAU,kBANvCM,IAAMC,YCYVQ,0LAXP,OAEFlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdE,KAAKC,MAAMa,iBALGV,IAAMC,mBCaZU,0LAXP,OAEFpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdE,KAAKC,MAAMa,iBALMV,IAAMC,YC2EfW,oNArEbC,KAAK,WAEH,IADA,IAAIC,EAAMC,EACDC,EAAIF,EAAMG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACR,EAAMI,GAAIJ,EAAME,IAAvCF,EAAME,GAFkCM,EAAA,GAE9BR,EAAMI,GAFwBI,EAAA,GAI3C,OAAOR,KAEXS,MAAM,CACJxB,MAAM,EACND,SAAS,EACT0B,KAAKrB,EAAKU,OACVY,QAAQ,MAIVpB,MAAM,SAACV,GACP,IACI+B,EADED,EAAQtB,EAAKoB,MAAME,QAAQE,OAAO,SAAAH,GAAI,OAAEA,EAAK7B,KAAKA,IAEpDiC,EAASzB,EAAKoB,MAAME,QACpB3B,EAASK,EAAKoB,MAAMzB,SAEtB,QAAgB+B,IAAbJ,EAAQ,GAAe,CAExB,IAAIK,EAAW3B,EAAKoB,MAAMC,KAAKG,OAAO,SAAAH,GAAI,OAAEA,EAAK7B,KAAKA,IACtDiC,EAASG,KAAKD,EAAW,IAI1BhC,GAFG4B,EAASvB,EAAKoB,MAAMxB,MAAM,GAEVD,EAAU4B,EAAS5B,OAIrC4B,EAAS,EACTE,EAAS,GAGXzB,EAAK6B,SACD,CACGjC,MAAM2B,EACN5B,SAASA,EACT0B,KAAKrB,EAAKU,OACVY,QAAQG,6EAQN,IAAAK,EAAArC,KACP,OACAL,EAAAC,EAAAC,cAACyC,EAAD,KACK3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAQpC,MAAOH,KAAK2B,MAAMxB,MAAOD,SAAUF,KAAK2B,MAAMzB,WACtDP,EAAAC,EAAAC,cAAC2C,EAAD,KACCxC,KAAK2B,MAAMC,KAAKa,IAAI,SAAAC,GAAO,OAC3B/C,EAAAC,EAAAC,cAAC8C,EAAD,CACAC,IAAKF,EAAQ3C,GACbA,GAAI2C,EAAQ3C,GACZY,IAAK+B,EAAQG,MACbpC,MAAO4B,EAAK5B,mBA7DJL,IAAMC,YCKJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b9d7fc32.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./nav.css\"\r\n\r\nclass Navbar extends React.Component {\r\n        // nav(props) {\r\n        //         this.score=props.score\r\n        //         this.top=props.topScore\r\n\r\n        // }\r\n\r\n        render() {\r\n                return(\r\n\r\n                        <nav className=\"navbar navbar-light\">\r\n                                 <h4 id=\"topScore\"> Top Score: {this.props.topScore}</h4>\r\n                                 <h4 id=\"score\"> Score: {this.props.score}</h4>        \r\n                              \r\n                        </nav>\r\n                )\r\n\r\n        }\r\n\r\n}\r\n\r\nexport default Navbar","import React from \"react\";\r\nimport \"./card.css\"\r\n\r\nclass Card extends React.Component{\r\n\r\n    render(){\r\n\r\n        return(\r\n        <div className=\"clickyImg\" onClick={()=> this.props.click(this.props.id)} >        \r\n            <img src={this.props.img} alt=\"img\" className=\"image\"></img>\r\n        </div>\r\n     \r\n\r\n        );\r\n\r\n\r\n\r\n    }    \r\n}\r\n\r\nexport default Card","import React from 'react';\r\nimport \"./holder.css\"\r\nclass holder extends React.Component{\r\n    render(){\r\n        return(\r\n                \r\n      <div className=\"holder\">\r\n      {this.props.children}\r\n    </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default holder;","import React from 'react';\r\nimport \"./container.css\"\r\nclass container extends React.Component{\r\n    render(){\r\n        return(\r\n                \r\n      <div className=\"container\">\r\n      {this.props.children}\r\n    </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default container;","import React from 'react';\nimport Navbar from \"./components/nav/navbars\";\nimport Card from \"./components/card/card\";\nimport Holder from \"./components/card_holder/index\"\nimport lotr from \"./cards.json\"\nimport Container from \"./components/container/index\"\nimport './App.css';\nclass App extends React.Component {\n  sort=()=>{\n    let array=lotr\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]]; // swap elements\n    }\n    return array\n  }\nstate={\n  score:0,\n  topScore:0,\n  list:this.sort(),\n  clicked:[]\n}  \n\n\nclick=(id)=>{\nconst clicked=this.state.clicked.filter(list=>list.id===id)//checks if obj is in clicked array \nlet newScore\nlet newArray=this.state.clicked\nlet topScore=this.state.topScore;\n//clicked obj is in the clicked array\n  if(clicked[0]===undefined){\n    //when the  clicked is null its not in the clicked array\n    let newClicked=this.state.list.filter(list=>list.id===id)\n    newArray.push(newClicked[0])\n    //push clicked obj to clicked array\n      newScore=this.state.score+1\n      //increment the score by 1\n   topScore=(newScore>topScore)?newScore:topScore\n  }\n  else{\n    //resets score and clicked array\n    newScore=0\n    newArray=[]\n    \n  }\n  this.setState(\n      {\n         score:newScore,\n         topScore:topScore,\n         list:this.sort(),\n         clicked:newArray\n         \n      }\n    )\n}\n\n\n\n  render() {\n    return (\n    <Container>\n         <Navbar score={this.state.score} topScore={this.state.topScore}/>\n         <Holder>\n         {this.state.list.map(element=>(\n          <Card\n          key={element.id}\n          id={element.id}\n          img={element.image}\n          click={this.click}\n          />     \n      ))}\n         </Holder>\n     </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}